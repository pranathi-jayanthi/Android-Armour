generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  androidZip    androidZip[]

  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Progress {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model androidZip {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  filename        String
  originalUrl     String
  progress        Progress
  error           String?
  updatedUrl      String?
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  securityFeature securityFeature[]
}

model securityFeature {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  featureName  String
  isAdded      Boolean
  androidZipId String
  androidZip   androidZip @relation(fields: [androidZipId], references: [id], onDelete: Cascade)
}
